name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

    

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_database
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Wait for PostgreSQL to be ready
    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
      env:
        PGPASSWORD: test

    # Drop and create database
    - name: Drop and create database
      run: |
        psql -h localhost -p 5432 -U test_user -d postgres -c "DROP DATABASE IF EXISTS test_database;"
        psql -h localhost -p 5432 -U test_user -d postgres -c "CREATE DATABASE test_database;"
      env:
        PGPASSWORD: test

    # Create tables
    - name: Create tables
      run: |
        psql -h localhost -p 5432 -U test_user -d test_database -f db_sql/create_tables.sql
      env:
        PGPASSWORD: test

    # Insert test data
    - name: Insert test data
      run: |
        psql -h localhost -p 5432 -U test_user -d test_database -f db_sql/insert_data.sql
      env:
        PGPASSWORD: test    

#Setup variables for moto testing
    - name: Set environment variables for mock AWS tests
      run: |
        echo "AWS_ACCESS_KEY_ID=fake-access-key-id"
        echo "AWS_SECRET_ACCESS_KEY=fake-secret-access-key"
        echo "AWS_DEFAULT_REGION=eu-west-2"
        echo "AWS_SESSION_TOKEN=testing"
        echo "AWS_SECURITY_TOKEN=testing"

#Setup variables for test database
    - name: Set environment variables for test database connection
      run: |
        echo "DB_NAME=test_database"
        echo "DB_USER=test_user"
        echo "DB_HOST=localhost"
        echo "DB_PORT=5432"
        echo "DB_PASSWORD=test"   
  
# Run pytest
    - name: Test with pytest
      run: |
        export PYTHONPATH=$(pwd)
        pytest

# Run formatting checks
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Check files using the black formatter
      uses: rickstaa/action-black@v1
      id: action_black
      with:
        black_args: "."
    - name: Create Pull Request
      if: steps.action_black.outputs.is_formatted == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "Format Python code with psf/black push"
        commit-message: ":art: Format Python code with psf/black"
        body: |
          There appear to be some python formatting errors in ${{ github.sha }}. This pull request
          uses the [psf/black](https://github.com/psf/black) formatter to fix these issues.
        base: ${{ github.head_ref }} # Creates pull request onto pull request or commit branch
        branch: actions/black

# Run security checks
    - name: Run bandit checks
      run: |
        bandit -lll */*.py *c/*/*.py
    - name: Run safety checks
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}